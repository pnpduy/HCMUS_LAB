# -*- coding: utf-8 -*-
"""19110290_THPTTT_Tuan4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vxli2XHGKzSZM_pspz5dLKxWG6aqWYVK

# Họ & Tên: Phạm Nguyễn Phương Duy
# MSSV: 19110290

# Bài 1
"""

import random

def find_element(A, x):
    # Kiểm tra xem x có nằm trong mảng A không
    if x in A:
        # Nếu x nằm trong mảng A, trả về chỉ số của nó
        return A.index(x)
    else:
        # Nếu x không nằm trong mảng A, trả về None
        return None

#Test dữ liệu:
for i in range(10, 101, 10):
    #Đặt độ dài của mảng A
    N = i

    # Tạo một mảng ngẫu nhiên đã sắp xếp A có độ dài N
    A = sorted([random.randint(0, 100) for _ in range(N)])

    # Tạo một phần tử ngẫu nhiên x
    x = random.randint(0, 100)

    # In mảng A có N phần tử được sấp xếp và phần tử x
    print(f"Đặt độ dài của mảng A: {i}")
    print(f"A: {A}")
    print(f"x: {x}")
    print(f"Result: {find_element(A, x)}\n")

"""# Bài 2"""

import random
import time

def find_smallest(S, k):
    # Sắp xếp tập hợp S theo thứ tự tăng dần
    S.sort()
    # Trả về phần tử nhỏ thứ k
    return S[k-1]

#Test Dữ liệu
# Đặt các giá trị của N để kiểm tra
N_values = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
# Đặt giá trị của k
k = 5

# Lặp lại cho mỗi giá trị của N
for N in N_values:
    # Khởi tạo tổng thời gian bằng 0
    total_time = 0

    # Tạo ngẫu nhiên tập hợp S có N phần tử khác nhau trong đó S(i) ∈ {1, 2, . . . , 1000}
    S = random.sample(range(1, 1001), N)
    # Ghi lại thời gian bắt đầu
    start_time = time.time()
    # Tìm phần tử nhỏ thứ k trong tập hợp S
    result = find_smallest(S, k)
    # Ghi lại thời gian kết thúc
    end_time = time.time()
    # Tính toán thời gian đã qua và cộng vào tổng thời gian
    total_time += (end_time - start_time)
    # Tính toán thời gian trung bình cho mỗi giá trị của N
    avg_time = total_time / 10
    # In ra thời gian trung bình cho mỗi giá trị của N
    print(f'Với N={N}, Thời gian trung bình: {avg_time:.6f} giây')