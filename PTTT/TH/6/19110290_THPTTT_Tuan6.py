# -*- coding: utf-8 -*-
"""19110290_THPTTT_Tuan6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fo32irxbg6TSEK5cPDn9YAFIKXl2-GbZ

# Họ & Tên: Phạm Nguyễn Phương Duy
# MSSV: 19110290
"""

import random
import numpy as np
import time

def Knapsack(S, A):
    n = len(A)
    dp = [[False for j in range(S + 1)] for i in range(n + 1)]
    dp[0][0] = True
    for i in range(1, n + 1):
        for j in range(S + 1):
            if j < A[i - 1]:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - A[i - 1]]
    if not dp[n][S]:
        return print("Không tìm được")
    result = []
    i, j = n, S
    while i > 0 and j > 0:
        if dp[i - 1][j]:
            i -= 1
        else:
            result.append(A[i - 1])
            j -= A[i - 1]
            i -= 1
    return result[::-1]

#Test
S = 500
for i in range(50, 501, 50):
    # Đặt độ dài của mảng A
    N = i
    # Khởi tạo tổng thời gian bằng 0
    total_time = 0

    # Tạo một mảng A đã sắp xếp có độ dài N với các số nguyên ngẫu nhiên duy nhất
    A = sorted(np.random.choice(501, size=N, replace=False))
    start_time = time.time()
    # Tìm phần tử đôi một khác nhau và có tổng bằng S trong A
    result = Knapsack(S,A)
    # Ghi lại thời gian kết thúc
    end_time = time.time()
    # Tính toán thời gian đã qua và cộng vào tổng thời gian
    total_time += (end_time - start_time)
    # Tính toán thời gian trung bình cho mỗi giá trị của N
    avg_time = total_time / 10
    # In ra thời gian trung bình cho mỗi giá trị của N
    print(f'Với N = {N}, Thời gian trung bình: {avg_time:.6f} giây')
    # In độ dài của mảng A, mảng A và kết quả gọi hàm knapsack với các đối số S và A
    print(f"Đặt độ dài của mảng A: {i}")
    print(f"A: {A}")
    print(f"Kết quả số có tồng bằng {S} = {result}\n")